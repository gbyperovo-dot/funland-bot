# web_app.py
from flask import Flask, render_template, request, jsonify, redirect, url_for, session, flash, send_from_directory, abort, make_response
import os
import json
import time
import shutil
from datetime import datetime
from dotenv import load_dotenv
import requests
import socket
import logging
import re
import functools

# - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è -
logging.basicConfig(filename='audit.log',
                    level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# - –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è -
load_dotenv()

# - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", "super-secret-key-for-d-space-bot")

# - –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ê–Ø -
app.config['TEMPLATES_AUTO_RELOAD'] = True
app.jinja_env.auto_reload = True
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0

# - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ -
KNOWLEDGE_BASE = {}
BOOKINGS = []
conversation_history = {}
LOG_FILE = "bot_log.json"
BACKUPS_DIR = "backups"
os.makedirs(BACKUPS_DIR, exist_ok=True)

# - –ü—É—Ç–∏ -
KNOWLEDGE_FILE = "knowledge_base.json"
BOOKINGS_FILE = "bookings.json"
SUGGESTIONS_FILE = "suggestions.json"
MENU_FILE = "menu.json"
MENU_CATEGORIES_FILE = "menu_categories.json"

# - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é -
SYSTEM_CATEGORIES = ['attractions', 'events', 'services', 'info']

# - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è -
suggestionMap = {}
MENU_CACHE = None

# - –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è -
def no_cache(view):
    @functools.wraps(view)
    def no_cache_view(*args, **kwargs):
        response = make_response(view(*args, **kwargs))
        response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
        return response
    return no_cache_view

# - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -
def load_knowledge_base():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ JSON"""
    global KNOWLEDGE_BASE
    if os.path.exists(KNOWLEDGE_FILE):
        try:
            with open(KNOWLEDGE_FILE, "r", encoding="utf-8") as f:
                KNOWLEDGE_BASE = json.load(f)
            print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
    else:
        KNOWLEDGE_BASE = {
            "–ø—Ä–∏–≤–µ—Ç": "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ D-Space! üòä\n–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π",
            "–ø–æ–∫–∞": "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ!",
            "—Å–ø–∞—Å–∏–±–æ": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üòä"
        }
        save_knowledge_base()
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

def save_knowledge_base():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ JSON"""
    try:
        with open(KNOWLEDGE_FILE, "w", encoding="utf-8") as f:
            json.dump(KNOWLEDGE_BASE, f, ensure_ascii=False, indent=4)
        print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")

def load_bookings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ JSON"""
    global BOOKINGS
    if os.path.exists(BOOKINGS_FILE):
        try:
            with open(BOOKINGS_FILE, "r", encoding="utf-8") as f:
                BOOKINGS = json.load(f)
            print("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
    else:
        BOOKINGS = []
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

def save_bookings():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ JSON"""
    try:
        with open(BOOKINGS_FILE, "w", encoding="utf-8") as f:
            json.dump(BOOKINGS, f, ensure_ascii=False, indent=4)
        print("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")

def load_suggestion_map():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ JSON"""
    global suggestionMap
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    if os.path.exists(SUGGESTIONS_FILE):
        try:
            with open(SUGGESTIONS_FILE, "r", encoding="utf-8") as f:
                suggestionMap = json.load(f)
            print("‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
            return  # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {e}")
            suggestionMap = {}
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    suggestionMap = {
        "vr": [
            {"text": "–ò–≥—Ä—ã", "question": "–∏–≥—Ä—ã –≤ vr", "answer": "–£ –Ω–∞—Å –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ VR-–∏–≥—Ä—ã: —ç–∫—à–µ–Ω—ã, –≥–æ–Ω–∫–∏, –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏! üéÆ"},
            {"text": "–¶–µ–Ω—ã", "question": "—Å—Ç–æ–∏–º–æ—Å—Ç—å vr", "answer": "VR-—Å–µ–∞–Ω—Å —Å—Ç–æ–∏—Ç –æ—Ç 300 —Ä—É–±–ª–µ–π –∑–∞ 30 –º–∏–Ω—É—Ç! üí∞"},
            {"text": "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "question": "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å vr", "answer": "–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å VR, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è! üìÖ"},
            {"text": "–ü—Ä–∞–≤–∏–ª–∞", "question": "–ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ vr", "answer": "–í VR-–∑–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–ª—é–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! ‚ö†Ô∏è"}
        ],
        "–±–∞—Ç—É—Ç—ã": [
            {"text": "–î–ª—è –¥–µ—Ç–µ–π?", "question": "–º–æ–∂–Ω–æ –ª–∏ –Ω–∞ –±–∞—Ç—É—Ç—ã —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –¥–µ—Ç—å–º–∏", "answer": "–î–∞, —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞—Ç—É—Ç—ã –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 3 –ª–µ—Ç! üë∂"},
            {"text": "–¶–µ–Ω—ã", "question": "—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞—Ç—É—Ç–æ–≤", "answer": "–ë–∞—Ç—É—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä - –æ—Ç 500 —Ä—É–±–ª–µ–π –∑–∞ —á–∞—Å! üèÄ"},
            {"text": "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "question": "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∞—Ç—É—Ç—ã", "answer": "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –±–∞—Ç—É—Ç—ã —á–µ—Ä–µ–∑ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è! üéØ"},
            {"text": "–ê–Ω–∏–º–∞—Ç–æ—Ä", "question": "–µ—Å—Ç—å –ª–∏ –∞–Ω–∏–º–∞—Ç–æ—Ä –Ω–∞ –±–∞—Ç—É—Ç—ã", "answer": "–î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –∞–Ω–∏–º–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤! üé™"}
        ],
        "default": [
            {"text": "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "question": "—Ö–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "answer": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞! üìã"},
            {"text": "–¶–µ–Ω—ã", "question": "—Ü–µ–Ω—ã", "answer": "–¶–µ–Ω—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞. –£—Ç–æ—á–Ω–∏—Ç–µ —É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞! üíµ"}
        ]
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    try:
        with open(SUGGESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(suggestionMap, f, ensure_ascii=False, indent=4)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª suggestions.json –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: {e}")

def save_suggestion_map():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ JSON"""
    try:
        with open(SUGGESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(suggestionMap, f, ensure_ascii=False, indent=4)
        print("‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: {e}")

def load_menu_categories():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    if os.path.exists(MENU_CATEGORIES_FILE):
        try:
            with open(MENU_CATEGORIES_FILE, 'r', encoding='utf-8') as f:
                categories = json.load(f)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –æ–∂–∏–¥–∞–µ–º—É—é —à–∞–±–ª–æ–Ω–æ–º
            return {
                "system_categories": {
                    "attractions": "üé™ –ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã",
                    "events": "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                    "services": "üõ†Ô∏è –£—Å–ª—É–≥–∏",
                    "info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                },
                "custom_categories": {k: v for k, v in categories.items() 
                                    if k not in ['attractions', 'events', 'services', 'info']}
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é: {e}")
            return {
                "system_categories": {
                    "attractions": "üé™ –ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã",
                    "events": "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                    "services": "üõ†Ô∏è –£—Å–ª—É–≥–∏",
                    "info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                },
                "custom_categories": {}
            }
    else:
        default_categories = {
            "attractions": "üé™ –ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã",
            "events": "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            "services": "üõ†Ô∏è –£—Å–ª—É–≥–∏",
            "info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        }
        save_menu_categories(default_categories)
        return {
            "system_categories": default_categories,
            "custom_categories": {}
        }

def save_menu_categories(categories_dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –≤ JSON —Ñ–∞–π–ª."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–ª–æ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        flat_categories = {}
        if "system_categories" in categories_dict:
            flat_categories.update(categories_dict["system_categories"])
        if "custom_categories" in categories_dict:
            flat_categories.update(categories_dict["custom_categories"])
        
        with open(MENU_CATEGORIES_FILE, 'w', encoding='utf-8') as f:
            json.dump(flat_categories, f, ensure_ascii=False, indent=2)
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é: {e}")

def load_menu():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–Ω—é –∏–∑ JSON"""
    global MENU_CACHE
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
    if MENU_CACHE is not None:
        return MENU_CACHE
        
    menu_items = []
    if os.path.exists(MENU_FILE):
        try:
            with open(MENU_FILE, "r", encoding="utf-8") as f:
                menu_items = json.load(f)
            print("‚úÖ –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            MENU_CACHE = menu_items
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {e}")
    else:
        menu_items = [
            {"admin_text": "VR-–∑–æ–Ω—ã", "display_text": "üéÆ VR-–∑–æ–Ω—ã ‚Äî –æ—Ç 300 ‚ÇΩ", "question": "vr", "category": "attractions", "price_info": "–æ—Ç 300 ‚ÇΩ", "suggestion_topic": "vr"},
            {"admin_text": "–ë–∞—Ç—É—Ç—ã", "display_text": "üèÄ –ë–∞—Ç—É—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä ‚Äî –æ—Ç 500 ‚ÇΩ", "question": "–±–∞—Ç—É—Ç—ã", "category": "attractions", "price_info": "–æ—Ç 500 ‚ÇΩ", "suggestion_topic": "–±–∞—Ç—É—Ç—ã"},
            {"admin_text": "–ù–µ—Ä—Ñ", "display_text": "üî´ –ù–µ—Ä—Ñ-–∞—Ä–µ–Ω–∞ ‚Äî –æ—Ç 2500 ‚ÇΩ", "question": "–Ω–µ—Ä—Ñ", "category": "attractions", "price_info": "–æ—Ç 2500 ‚ÇΩ", "suggestion_topic": "default"},
            {"admin_text": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "display_text": "üéâ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "question": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "category": "events", "price_info": "", "suggestion_topic": "default"},
            {"admin_text": "–í—ã–ø—É—Å–∫–Ω—ã–µ", "display_text": "üéì –í—ã–ø—É—Å–∫–Ω—ã–µ", "question": "–≤—ã–ø—É—Å–∫–Ω—ã–µ", "category": "events", "price_info": "", "suggestion_topic": "default"},
            {"admin_text": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "display_text": "üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "question": "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "category": "events", "price_info": "", "suggestion_topic": "default"}
        ]
        with open(MENU_FILE, "w", encoding="utf-8") as f:
            json.dump(menu_items, f, ensure_ascii=False, indent=4)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª menu.json –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        MENU_CACHE = menu_items
    return menu_items

def save_menu(menu_items):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–Ω—é –≤ JSON"""
    try:
        with open(MENU_FILE, "w", encoding="utf-8") as f:
            json.dump(menu_items, f, ensure_ascii=False, indent=4)
        print("‚úÖ –ú–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        # üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        global MENU_CACHE
        MENU_CACHE = menu_items
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–Ω—é: {e}")

# - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ -
load_knowledge_base()
load_bookings()
load_suggestion_map()
load_menu()

# - –ú–∞—Ä—à—Ä—É—Ç—ã -
@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template("index.html")

@app.route("/chat", methods=["POST"])
def chat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    try:
        data = request.json
        question = data.get("message", "").strip().lower()
        
        print(f"üîç –í–æ–ø—Ä–æ—Å: {question}")
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫: {list(suggestionMap.keys())}")

        if not question:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.", "source": "error", "suggestions": []})
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º suggestionMap (–ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏)
        response = None
        source = "suggestion_map"
        suggestions = []
        found_topic = None
        
        # –ò—â–µ–º –æ—Ç–≤–µ—Ç –≤ suggestionMap –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞
        for topic, items in suggestionMap.items():
            for item in items:
                if item["question"] == question:
                    response = item.get("answer")
                    found_topic = topic
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º–µ: {topic}")
                    break
            if response:
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ suggestionMap, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        if not response:
            response = KNOWLEDGE_BASE.get(question)
            source = "knowledge_base"
            if response:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º Yandex GPT
        if not response:
            try:
                response = call_yandex_gpt(question)
                source = "yandex_gpt"
                print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Yandex GPT")
            except Exception as e:
                response = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                source = "error"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
        if found_topic:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–µ–º—É –≤ suggestionMap, –±–µ—Ä–µ–º –≤—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ —ç—Ç–æ–π —Ç–µ–º—ã
            suggestions = [{"text": s["text"], "question": s["question"]} for s in suggestionMap.get(found_topic, [])]
            print(f"üéØ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ —Ç–µ–º—ã: {found_topic}")
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–º—É, –∏—â–µ–º –ø–æ –º–µ–Ω—é - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É
            menu_items = load_menu()
            menu_topic = None
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
            for item in menu_items:
                if item["question"] == question:
                    menu_topic = item.get("suggestion_topic")
                    print(f"üìå –ù–∞–π–¥–µ–Ω –ø—É–Ω–∫—Ç –º–µ–Ω—é —Å —Ç–µ–º–æ–π: {menu_topic}")
                    break
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–µ–º—É –≤ –º–µ–Ω—é, –±–µ—Ä–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
            if menu_topic and menu_topic in suggestionMap:
                suggestions = [{"text": s["text"], "question": s["question"]} for s in suggestionMap.get(menu_topic, [])]
                print(f"üéØ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ —Ç–µ–º—ã –º–µ–Ω—é: {menu_topic}")
            else:
                # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
                suggestions = [{"text": s["text"], "question": s["question"]} for s in suggestionMap.get("default", [])]
                print(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏")
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {len(suggestions)}")
        print(f"üéØ –°–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {[s['text'] for s in suggestions]}")
        
        log_interaction(question, response, source)
        return jsonify({
            "response": response,
            "source": source,
            "suggestions": suggestions
        })
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ chat: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"response": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", "source": "error", "suggestions": []})

@app.route("/ask", methods=["POST"])
def ask():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    data = request.json
    question = data.get("question", "").strip().lower()
    if not question:
        return jsonify({"answer": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."})
    
    response = KNOWLEDGE_BASE.get(question)
    source = "knowledge_base"
    if not response:
        try:
            response = call_yandex_gpt(question)
            source = "yandex_gpt"
        except Exception as e:
            response = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            source = "error"
    
    log_interaction(question, response, source)
    return jsonify({"answer": response})

@app.route("/feedback", methods=["POST"])
def feedback():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    data = request.json
    question = data.get("question")
    feedback = data.get("feedback")
    feedback_file = "feedback.json"
    logs = []
    if os.path.exists(feedback_file):
        try:
            with open(feedback_file, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
        except:
            pass
    logs.append({
        "timestamp": datetime.now().isoformat(),
        "question": question,
        "feedback": feedback
    })
    try:
        with open(feedback_file, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=4)
        return jsonify({"status": "ok"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route("/suggestions/<topic>")
def get_suggestions_by_topic(topic):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã"""
    try:
        # –ò—â–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        suggestions = suggestionMap.get(topic.lower(), [])
        
        # –ï—Å–ª–∏ –¥–ª—è —Ç–µ–º—ã –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if not suggestions:
            suggestions = suggestionMap.get("default", [])
            
        return jsonify({"suggestions": suggestions})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è —Ç–µ–º—ã {topic}: {e}")
        return jsonify({"suggestions": []})

@app.route("/api/menu-display")
def get_menu_display():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é —Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    menu_items = load_menu()
    display_items = []
    
    for item in menu_items:
        display_items.append({
            "text": item.get("display_text", item.get("admin_text", "")),
            "question": item.get("question", ""),
            "suggestion_topic": item.get("suggestion_topic", "default")
        })
    
    return jsonify(display_items)

@app.route("/admin/suggestions")
def admin_suggestions():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    return render_template("admin/suggestions.html", suggestion_map=suggestionMap)

@app.route("/admin/suggestions", methods=["POST"])
def add_suggestion():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –æ—Ç–≤–µ—Ç–æ–º"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    
    topic = request.form.get("topic").strip().lower()
    text = request.form.get("suggestion-text").strip()
    question = request.form.get("suggestion-question").strip().lower()
    answer = request.form.get("suggestion-answer").strip()
    
    if not topic or not text or not question or not answer:
        flash("‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", "error")
        return redirect(url_for("admin_suggestions"))
    
    if topic not in suggestionMap:
        suggestionMap[topic] = []
    
    if any(s["text"] == text for s in suggestionMap[topic]):
        flash("‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "error")
        return redirect(url_for("admin_suggestions"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º answer –≤ –ø–æ–¥—Å–∫–∞–∑–∫—É
    suggestionMap[topic].append({
        "text": text,
        "question": question,
        "answer": answer
    })
    
    save_suggestion_map()
    flash("‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", "success")
    return redirect(url_for("admin_suggestions"))

@app.route("/suggestion-answer", methods=["POST"])
def get_suggestion_answer():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å—É –∏–∑ suggestionMap"""
    data = request.json
    question = data.get("question", "").strip().lower()

    if not question:
        return jsonify({"answer": "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400

    # –ò—â–µ–º –æ—Ç–≤–µ—Ç –≤ suggestionMap
    for topic, suggestions in suggestionMap.items():
        for suggestion in suggestions:
            if suggestion.get("question", "").strip().lower() == question:
                return jsonify({"answer": suggestion.get("answer", "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")})

    return jsonify({"answer": "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

@app.route("/admin/suggestions/delete/<topic>/<text>")
def delete_suggestion(topic, text):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    
    if topic in suggestionMap:
        suggestionMap[topic] = [s for s in suggestionMap[topic] if s["text"] != text]
        save_suggestion_map()
        flash("‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞", "success")
    else:
        flash("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", "error")
    
    return redirect(url_for("admin_suggestions"))

@app.route("/admin/menu")
def admin_menu():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    
    menu_items = load_menu()
    categories = load_menu_categories()
    
    return render_template("admin/menu_edit.html", 
                         menu_items=menu_items,
                         categories=categories)

@app.route("/admin/menu/add", methods=["POST"])
def add_menu_item():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        return jsonify({"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
    
    try:
        admin_text = request.form.get("admin_text", "").strip()
        display_text = request.form.get("display_text", "").strip()
        question = request.form.get("question", "").strip().lower()
        category = request.form.get("category", "attractions")
        price_info = request.form.get("price_info", "")
        suggestion_topic = request.form.get("suggestion_topic", "default")
        
        if not admin_text or not display_text or not question:
            return jsonify({"success": False, "error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
        
        menu_items = load_menu()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if any(item.get("admin_text") == admin_text for item in menu_items):
            return jsonify({"success": False, "error": "–ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
        
        if any(item.get("question") == question for item in menu_items):
            return jsonify({"success": False, "error": "–ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        new_item = {
            "admin_text": admin_text,
            "display_text": display_text,
            "question": question,
            "category": category,
            "price_info": price_info,
            "suggestion_topic": suggestion_topic
        }
        
        menu_items.append(new_item)
        save_menu(menu_items)
        
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é: {admin_text} -> {question} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
        return jsonify({"success": True})
        
    except Exception as e:
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

@app.route("/admin/menu/edit/<int:index>", methods=["GET"])
def edit_menu_item_form(index):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    
    menu_items = load_menu()
    categories = load_menu_categories()
    
    if 0 <= index < len(menu_items):
        item_to_edit = menu_items[index]
        return render_template("admin/menu_edit.html", 
                             menu_items=menu_items,
                             categories=categories,
                             edit_item=item_to_edit,
                             edit_index=index)
    else:
        flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏", "error")
        return redirect(url_for("admin_menu"))

@app.route("/admin/menu/edit/<int:index>", methods=["POST"])
def edit_menu_item(index):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        return jsonify({"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
    
    try:
        menu_items = load_menu()
        if not (0 <= index < len(menu_items)):
            return jsonify({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏"})

        admin_text = request.form.get("admin_text", "").strip()
        display_text = request.form.get("display_text", "").strip()
        question = request.form.get("question", "").strip().lower()
        category = request.form.get("category", "attractions")
        price_info = request.form.get("price_info", "")
        suggestion_topic = request.form.get("suggestion_topic", "default")

        if not admin_text or not display_text or not question:
            return jsonify({"success": False, "error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
        for i, item in enumerate(menu_items):
            if i != index:
                if item.get("admin_text") == admin_text:
                    return jsonify({"success": False, "error": "–ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
                if item.get("question") == question:
                    return jsonify({"success": False, "error": "–ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})

        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        menu_items[index] = {
            "admin_text": admin_text,
            "display_text": display_text,
            "question": question,
            "category": category,
            "price_info": price_info,
            "suggestion_topic": suggestion_topic
        }
        
        save_menu(menu_items)
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–∏–ª –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é: {admin_text} -> {question} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
        return jsonify({"success": True})
        
    except Exception as e:
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

@app.route("/admin/menu/delete/<int:index>")
def delete_menu_item(index):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    
    try:
        menu_items = load_menu()
        if 0 <= index < len(menu_items):
            removed = menu_items.pop(index)
            save_menu(menu_items)
            flash(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{removed['admin_text']}' —É–¥–∞–ª–µ–Ω–∞", "success")
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é: {removed['admin_text']}")
        else:
            flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏", "error")
    except Exception as e:
        flash(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}", "error")
    
    return redirect(url_for("admin_menu"))

@app.route('/menu-items')
@no_cache
def get_menu_items():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    menu_items = load_menu()
    return jsonify({"items": menu_items})

@app.route('/menu-items/<category>')
@no_cache
def get_menu_items_by_category(category):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    menu_items = load_menu()
    filtered_items = [item for item in menu_items if item.get("category") == category]
    return jsonify({"items": filtered_items})

@app.route("/admin/menu/categories/data")
def get_categories_data():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if not session.get("admin_logged_in"):
        return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
    
    categories = load_menu_categories()
    return jsonify(categories)

@app.route("/admin/menu/categories")
def admin_menu_categories():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏) –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    
    categories = load_menu_categories()
    return render_template("admin/menu_categories.html", 
                         categories=categories,
                         system_categories=SYSTEM_CATEGORIES)

@app.route("/admin/menu/categories", methods=["POST"])
def add_menu_category():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))

    key = request.form.get("category_key", "").strip().lower()
    name = request.form.get("category_name", "").strip()

    if not key or not name:
        flash("‚ùå –û–±–∞ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", "error")
        return redirect(url_for("admin_menu_categories"))

    if not re.match(r'^[a-z0-9_]+$', key):
         flash("‚ùå –ö–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ", "error")
         return redirect(url_for("admin_menu_categories"))

    categories = load_menu_categories()
    
    if key in categories.get("system_categories", {}) or key in categories.get("custom_categories", {}):
        flash("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "error")
        return redirect(url_for("admin_menu_categories"))

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    custom_categories = categories.get("custom_categories", {})
    custom_categories[key] = name
    categories["custom_categories"] = custom_categories
    
    save_menu_categories(categories)
    
    flash(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", "success")
    logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é: {key} -> {name}")
    return redirect(url_for("admin_menu_categories"))

@app.route("/admin/menu/categories/delete/<string:key>")
def delete_menu_category(key):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    
    if key in SYSTEM_CATEGORIES:
        flash("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "error")
        return redirect(url_for("admin_menu_categories"))

    categories = load_menu_categories()
    
    if key in categories.get("custom_categories", {}):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        menu_items = load_menu()
        if any(item.get("category") == key for item in menu_items):
            flash("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", "error")
            return redirect(url_for("admin_menu_categories"))
        
        del categories["custom_categories"][key]
        save_menu_categories(categories)
        flash(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{key}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", "success")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é: {key}")
    else:
        flash("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error")
        
    return redirect(url_for("admin_menu_categories"))

@app.route("/admin/login", methods=["GET", "POST"])
def admin_login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        if username == os.getenv("ADMIN_USER", "admin") and password == os.getenv("ADMIN_PASS", "1"):
            session["admin_logged_in"] = True
            logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É")
            return redirect(url_for("admin_dashboard"))
        flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "error")
        logging.warning("–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É")
    return render_template("admin/login.html")

@app.route("/admin")
def admin_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∏"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    
    return render_template("admin/dashboard.html", bookings=BOOKINGS)

@app.route("/admin/knowledge", methods=["GET", "POST"])
def knowledge_edit():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    
    if request.method == "POST":
        action = request.form.get("action")
        question = request.form.get("question", "").strip().lower()
        answer = request.form.get("answer", "").strip()
        
        if action == "add":
            if question and answer:
                KNOWLEDGE_BASE[question] = answer
                save_knowledge_base()
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å: '{question}'")
                flash("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω", "success")
            else:
                flash("‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", "error")
        elif action == "edit":
            if question and answer and question in KNOWLEDGE_BASE:
                KNOWLEDGE_BASE[question] = answer
                save_knowledge_base()
                logging.info(f"–ò–∑–º–µ–Ω—ë–Ω –≤–æ–ø—Ä–æ—Å: '{question}'")
                flash("‚úÖ –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω", "success")
            else:
                flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "error")
        elif action == "delete":
            if question in KNOWLEDGE_BASE:
                del KNOWLEDGE_BASE[question]
                save_knowledge_base()
                logging.info(f"–£–¥–∞–ª—ë–Ω –≤–æ–ø—Ä–æ—Å: '{question}'")
                flash("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω", "success")
            else:
                flash("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
    
    load_knowledge_base()
    return render_template("admin/knowledge_edit.html", knowledge=KNOWLEDGE_BASE)

@app.route("/admin/logs")
def view_logs():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    
    logs = []
    if os.path.exists(LOG_FILE):
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
            logs = sorted(logs, key=lambda x: x["timestamp"], reverse=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            flash("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤", "error")
    
    return render_template("admin/logs.html", logs=logs)

@app.route("/admin/edit_response", methods=["POST"])
def edit_response():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤"""
    if not session.get("admin_logged_in"):
        return jsonify({"status": "error", "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
    
    question = request.form.get("question")
    new_answer = request.form.get("answer")
    
    if question and new_answer:
        KNOWLEDGE_BASE[question] = new_answer
        save_knowledge_base()
        logging.info(f"–ò–∑–º–µ–Ω—ë–Ω –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É: '{question}'")
        return jsonify({"status": "ok"})
    
    return jsonify({"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}), 400

@app.route("/admin/export_logs")
def export_logs():
    """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    
    if os.path.exists(LOG_FILE):
        return send_from_directory(".", "bot_log.json", as_attachment=True)
    
    flash("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
    return redirect(url_for("view_logs"))

@app.route("/admin/logout")
def admin_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    session.pop("admin_logged_in", None)
    flash("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", "info")
    logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    return redirect(url_for("index"))

@app.route("/static/<path:path>")
def send_static(path):
    """–†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏"""
    return send_from_directory("static", path)

@app.route("/booking", methods=["GET", "POST"])
def booking():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if request.method == "POST":
        name = request.form.get("name")
        phone = request.form.get("phone")
        date = request.form.get("date")
        guests = request.form.get("guests")
        event_type = request.form.get("event_type")
        
        if name and phone and date and guests and event_type:
            new_booking = {
                "name": name,
                "phone": phone,
                "date": date,
                "guests": guests,
                "event_type": event_type,
                "timestamp": datetime.now().isoformat()
            }
            BOOKINGS.append(new_booking)
            save_bookings()
            logging.info(f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å: {name}, {phone}")
            return render_template("booking.html", success="–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    
    return render_template("booking.html")

@app.route("/birthday_calc")
def birthday_calc():
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    return render_template("birthday_calc.html")

@app.route("/clear-cache-now")
def clear_cache_now():
    """–°—Ä–æ—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–µ–Ω—é"""
    global MENU_CACHE
    MENU_CACHE = None
    load_menu()
    return "‚úÖ –ö—ç—à –º–µ–Ω—é –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞."

def get_local_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP: {e}")
        return "127.0.0.1"

def call_yandex_gpt(prompt, history=None):
    """–í—ã–∑–æ–≤ Yandex GPT —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {os.getenv('YANDEX_API_KEY')}",
        "x-folder-id": os.getenv("YANDEX_FOLDER_ID"),
        "Content-Type": "application/json"
    }
    
    system_prompt = """
    –¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç D-Space. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.
    –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
    –¢—ã ‚Äì –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç D-Space. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, —Å —ç–º–æ–¥–∑–∏.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:
    –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–∞–∫–µ—Ç—ã: –°—Ç–∞–Ω–¥–∞—Ä—Ç (8000 ‚ÇΩ), –≠–∫—Å—Ç—Ä–∏–º (12 000 ‚ÇΩ), VR-–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ (15 000 ‚ÇΩ).
    –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–∫—Ü–∏–∏: +10% —Å–∫–∏–¥–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ 10 —Å–µ–Ω—Ç—è–±—Ä—è.
    –£—Ç–æ—á–Ω–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π, —Ç–µ–º–∞—Ç–∏–∫—É, –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.
    –í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ü–µ–Ω—ã ‚Äì –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —Å–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å.
    """
    
    messages = [{"role": "system", "text": system_prompt}]
    if history:
        messages.extend(history)
    messages.append({"role": "user", "text": prompt})
    
    payload = {
        "modelUri": f"gpt://{os.getenv('YANDEX_FOLDER_ID')}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.3,
            "maxTokens": 1000
        },
        "messages": messages
    }
    
    for attempt in range(3):
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=10)
            if response.status_code == 200:
                return response.json()["result"]["alternatives"][0]["message"]["text"]
            elif response.status_code == 401:
                return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á."
            elif response.status_code == 400:
                return "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ folder_id."
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {str(e)}")
        time.sleep(1)
    
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def log_interaction(question, answer, source):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ bot_log.json"""
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "question": question,
        "answer": answer,
        "source": source
    }
    
    try:
        logs = []
        if os.path.exists(LOG_FILE):
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
        
        logs.append(log_entry)
        
        if len(logs) % 100 == 0:
            backup_path = os.path.join(BACKUPS_DIR, f"bot_log_{int(time.time())}.json")
            shutil.copy2(LOG_FILE, backup_path)
            print(f"üîÑ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=4)
        
        print("‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–≥")
        logging.info("–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–≥")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    debug = os.getenv("FLASK_DEBUG", "false").lower() == "true"
    print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{get_local_ip()}:{port}")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ CTRL+C")
    app.run(host="0.0.0.0", port=port, debug=debug)