# excel_to_json.py
import pandas as pd
import json
import os
import re

def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if pd.isna(text) or text == 'None':
        return ""
    text = str(text).strip()
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
    text = re.sub(r'\n+', '\n', text)
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'[^\S\n]+', ' ', text)
    return text

def process_excel_to_json(file_path, output_file):
    try:
        # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
        df = pd.read_excel(
            file_path,
            sheet_name=0,
            engine='openpyxl',
            dtype=str,
            keep_default_na=False
        )

        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        key_col, value_col = None, None
        for col in df.columns:
            col_lower = str(col).lower()
            if "–≤–æ–ø—Ä–æ—Å" in col_lower or "key" in col_lower:
                key_col = col
            if "–æ—Ç–≤–µ—Ç" in col_lower or "value" in col_lower:
                value_col = col

        if not key_col or not value_col:
            available_cols = "\n".join(f"- {col}" for col in df.columns)
            raise ValueError(
                f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:\n{available_cols}\n"
                f"–ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '–≤–æ–ø—Ä–æ—Å'/'key' –∏ '–æ—Ç–≤–µ—Ç'/'value'"
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        knowledge_dict = {}
        current_key = None
        current_value = []

        for _, row in df.iterrows():
            key = clean_text(row[key_col])
            value = clean_text(row[value_col])

            if key:  # –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
                if current_key and current_value:
                    full_answer = "\n".join(filter(None, current_value))
                    knowledge_dict[current_key.lower()] = full_answer
                current_key = key
                current_value = [value] if value else []
            elif value:  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
                current_value.append(value)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
        if current_key and current_value:
            full_answer = "\n".join(filter(None, current_value))
            knowledge_dict[current_key.lower()] = full_answer

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(knowledge_dict, f, ensure_ascii=False, indent=4, sort_keys=True)

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω {output_file}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"- –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(knowledge_dict)}")
        print(f"- –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {next(iter(knowledge_dict))[:50]}...")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        if hasattr(e, 'args') and e.args:
            print(f"–î–µ—Ç–∞–ª–∏: {e.args}")
        return False
    return True

if __name__ == "__main__":
    file_path = "knowledge_base.xlsx"
    output_file = "knowledge_base.json"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        exit(1)

    success = process_excel_to_json(file_path, output_file)
    if not success:
        print("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ Excel-—Ñ–∞–π–ª–µ")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º")
        print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é")
        exit(1)