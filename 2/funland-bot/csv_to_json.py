#!/usr/bin/env python3
# csv_to_json.py
import csv
import json
import re
import os
import shutil
from collections import OrderedDict
from datetime import datetime

def create_backup(file_path):
    """–°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ —Å timestamp"""
    backup_dir = "backups"
    os.makedirs(backup_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{backup_dir}/{os.path.basename(file_path)}_{timestamp}.bak"
    shutil.copy2(file_path, backup_name)
    return backup_name

def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not text or text == 'None':
        return ""
    # –ó–∞–º–µ–Ω—è–µ–º <br> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = text.replace('<br>', '\n')
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
    text = re.sub(r'"+', '"', text)
    # –°—Ö–ª–æ–ø—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\n+', '\n', text)
    return text.strip()

def validate_entry(question, answer):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞"""
    if len(question) < 3:
        raise ValueError(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å: '{question}'")
    if not answer.strip():
        raise ValueError(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: '{question}'")
    if ';' in question:
        raise ValueError(f"–í–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª ';': '{question}'")

def parse_csv_to_dict(csv_path):
    """–ü–∞—Ä—Å–∏–Ω–≥ CSV –≤ —Å–ª–æ–≤–∞—Ä—å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    knowledge = OrderedDict()
    current_key = None
    current_value = []
    line_num = 1  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    with open(csv_path, 'r', encoding='utf-8-sig') as f:
        reader = csv.reader(f, delimiter=';')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        try:
            header = next(reader)
            line_num += 1
            if len(header) < 2 or header[0].lower() not in ['question', '–≤–æ–ø—Ä–æ—Å']:
                raise ValueError("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏: Question;Answer")
        except StopIteration:
            raise ValueError("CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")

        for row in reader:
            line_num += 1
            if len(row) < 2:
                continue
                
            key = clean_text(row[0])
            value = clean_text(row[1])

            try:
                if key:  # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                    if current_key:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
                        validate_entry(current_key, '\n'.join(current_value))
                        knowledge[current_key] = '\n'.join(current_value)
                    current_key = key.lower()
                    current_value = [value] if value else []
                elif value:  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    current_value.append(value)
            except ValueError as e:
                print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {line_num}: {str(e)}")
                continue
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    if current_key:
        try:
            validate_entry(current_key, '\n'.join(current_value))
            knowledge[current_key] = '\n'.join(current_value)
        except ValueError as e:
            print(f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {str(e)}")
    
    return knowledge

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä CSV –≤ JSON –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π')
    parser.add_argument('--csv', default='knowledge_edit.csv', help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')
    parser.add_argument('--json', default='knowledge_base.json', help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON')
    args = parser.parse_args()

    if not os.path.exists(args.csv):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.csv}")
        exit(1)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JSON, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        existing_data = OrderedDict()
        if os.path.exists(args.json):
            with open(args.json, 'r', encoding='utf-8') as f:
                existing_data = json.load(f, object_pairs_hook=OrderedDict)
            backup = create_backup(args.json)
            print(f"üîê –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è JSON: {backup}")

        print(f"üîç –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ {args.csv}...")
        new_data = parse_csv_to_dict(args.csv)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
        merged_data = OrderedDict()
        merged_data.update(existing_data)
        merged_data.update(new_data)
        
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON...")
        with open(args.json, 'w', encoding='utf-8') as f:
            json.dump(merged_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –û–±–Ω–æ–≤–ª—ë–Ω —Ñ–∞–π–ª: {args.json}")
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"- –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(merged_data)}")
        print(f"- –ù–æ–≤—ã—Ö/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö: {len(new_data)}")
        print(f"- –£–¥–∞–ª—ë–Ω–Ω—ã—Ö: {len(existing_data) - len(set(existing_data) - set(new_data))}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö)
        from collections import Counter
        duplicates = [q for q, cnt in Counter(k.lower() for k in merged_data.keys()).items() if cnt > 1]
        if duplicates:
            print("\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã (—Ä–∞–∑–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä):")
            for d in duplicates[:3]:
                print(f"  - {d}")
            if len(duplicates) > 3:
                print(f"  ... –∏ –µ—â—ë {len(duplicates)-3}")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –§–æ—Ä–º–∞—Ç CSV (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ';')")
        print("2. –ù–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Question;Answer")
        print("3. –ß—Ç–æ –Ω–µ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö")
        exit(1)

if __name__ == "__main__":
    main()