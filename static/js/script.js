// static/js/script.js (–ø–æ–ª–Ω–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
document.addEventListener('DOMContentLoaded', function() {
    initializeChat();
    loadDisplayMenu();
    setupEventListeners();
    setupCalculator();
});

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º
async function loadDisplayMenu() {
    try {
        const response = await fetch('/api/menu-display');
        const menuItems = await response.json();
        
        const menuContainer = document.getElementById('main-menu');
        if (!menuContainer) return;
        
        menuContainer.innerHTML = '';
        
        menuItems.forEach(item => {
            const button = document.createElement('button');
            button.className = 'menu-btn';
            button.textContent = item.text;
            button.onclick = () => handleMenuButtonClick(item.question, item.suggestion_topic);
            menuContainer.appendChild(button);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é:', error);
        
        // Fallback: –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π endpoint
        try {
            const fallbackResponse = await fetch('/menu-items');
            const fallbackMenu = await fallbackResponse.json();
            
            const menuContainer = document.getElementById('main-menu');
            if (menuContainer) {
                menuContainer.innerHTML = '';
                fallbackMenu.forEach(item => {
                    const button = document.createElement('button');
                    button.className = 'menu-btn';
                    button.textContent = item.text || item.admin_text || '';
                    button.onclick = () => handleMenuButtonClick(item.question, item.suggestion_topic || 'default');
                    menuContainer.appendChild(button);
                });
            }
        } catch (fallbackError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback –º–µ–Ω—é:', fallbackError);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º –º–µ–Ω—é
async function handleMenuButtonClick(question, suggestionTopic = null) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
    sendMessage(question);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ç–µ–º–∞
    if (suggestionTopic) {
        const suggestions = await loadSuggestions(suggestionTopic);
        displaySuggestions(suggestions);
    } else {
        // –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        document.getElementById('suggestions').style.display = 'none';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ —Ç–µ–º–µ
async function loadSuggestions(topic) {
    try {
        const response = await fetch(`/suggestions/${topic}`);
        const data = await response.json();
        return data.suggestions;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:', error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
function displaySuggestions(suggestions) {
    const suggestionsContainer = document.getElementById('suggestions');
    if (!suggestionsContainer) return;
    
    suggestionsContainer.innerHTML = '';
    
    if (suggestions && suggestions.length > 0) {
        suggestions.forEach(suggestion => {
            const button = document.createElement('button');
            button.className = 'suggestion-btn';
            button.textContent = suggestion.text;
            button.onclick = () => sendMessage(suggestion.question);
            suggestionsContainer.appendChild(button);
        });
        suggestionsContainer.style.display = 'flex';
    } else {
        suggestionsContainer.style.display = 'none';
    }
}

function initializeChat() {
    const chatMessages = document.getElementById('chat-messages');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏–∑ localStorage
    loadChatHistory();
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    userInput.focus();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    function handleSendMessage() {
        const message = userInput.value.trim();
        if (message) {
            addMessage(message, true);
            sendMessage(message);
            userInput.value = '';
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            document.getElementById('suggestions').style.display = 'none';
        }
    }
    
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    sendButton.addEventListener('click', handleSendMessage);
    userInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            handleSendMessage();
        }
    });
}

function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const clearButton = document.getElementById('clear-chat');
    const bookingButton = document.getElementById('booking-button');
    const calculatorButton = document.getElementById('calculator-button');
    
    if (clearButton) {
        clearButton.addEventListener('click', clearChat);
    }
    
    if (bookingButton) {
        bookingButton.addEventListener('click', () => {
            window.location.href = '/booking';
        });
    }
    
    if (calculatorButton) {
        calculatorButton.addEventListener('click', toggleCalculator);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è feedback
    setupFeedbackHandlers();
}

function setupFeedbackHandlers() {
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('feedback-btn')) {
            const messageElement = e.target.closest('.message');
            const question = messageElement?.querySelector('.message-text')?.textContent;
            const feedback = e.target.classList.contains('feedback-good') ? 1 : 0;
            
            if (question) {
                submitFeedback(question, feedback);
                
                // –í–∏–∑—É–∞–ª—å–Ω—ã–π feedback
                e.target.style.opacity = '0.5';
                e.target.disabled = true;
                
                const otherBtn = e.target.classList.contains('feedback-good') 
                    ? messageElement.querySelector('.feedback-bad')
                    : messageElement.querySelector('.feedback-good');
                
                if (otherBtn) {
                    otherBtn.style.opacity = '0.3';
                }
            }
        }
    });
}

async function sendMessage(message = null) {
    const userMessage = message || document.getElementById('user-input').value.trim();
    if (!userMessage) return;
    
    if (!message) {
        addMessage(userMessage, true);
        document.getElementById('user-input').value = '';
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingElement = document.createElement('div');
    loadingElement.className = 'message bot-message loading';
    loadingElement.innerHTML = `
        <div class="message-text">
            <div class="typing-indicator">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    `;
    document.getElementById('chat-messages').appendChild(loadingElement);
    scrollToBottom();
    
    try {
        const response = await fetch('/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message: userMessage })
        });
        
        const data = await response.json();
        
        // –£–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingElements = document.querySelectorAll('.loading');
        loadingElements.forEach(el => el.remove());
        
        // –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
        addMessage(data.response, false, data.source);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if (data.suggestions && data.suggestions.length > 0) {
            showSuggestions(data.suggestions);
        }
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        saveChatHistory();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        
        // –£–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingElements = document.querySelectorAll('.loading');
        loadingElements.forEach(el => el.remove());
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', false, 'error');
    }
}

function addMessage(text, isUser = false, source = null) {
    const chatMessages = document.getElementById('chat-messages');
    const messageElement = document.createElement('div');
    messageElement.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
    
    let messageHTML = `
        <div class="message-text">${formatMessage(text)}</div>
        <div class="message-time">${getCurrentTime()}</div>
    `;
    
    if (!isUser && source) {
        messageHTML += `
            <div class="message-source">–ò—Å—Ç–æ—á–Ω–∏–∫: ${source === 'knowledge_base' ? '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π' : 'Yandex GPT'}</div>
            <div class="feedback-buttons">
                <button class="feedback-btn feedback-good" title="–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å">üëç</button>
                <button class="feedback-btn feedback-bad" title="–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å">üëé</button>
            </div>
        `;
    }
    
    messageElement.innerHTML = messageHTML;
    chatMessages.appendChild(messageElement);
    scrollToBottom();
}

function formatMessage(text) {
    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Markdown
    return text
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/\n/g, '<br>')
        .replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>')
        .replace(/`([^`]+)`/g, '<code>$1</code>');
}

function showSuggestions(suggestions) {
    const suggestionsContainer = document.getElementById('suggestions');
    if (!suggestionsContainer) return;
    
    suggestionsContainer.innerHTML = '';
    
    suggestions.forEach(suggestion => {
        const button = document.createElement('button');
        button.className = 'suggestion-btn';
        button.textContent = suggestion.text;
        button.onclick = () => sendMessage(suggestion.question);
        suggestionsContainer.appendChild(button);
    });
    
    suggestionsContainer.style.display = 'flex';
}

function scrollToBottom() {
    const chatMessages = document.getElementById('chat-messages');
    if (chatMessages) {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
}

function getCurrentTime() {
    return new Date().toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
    });
}

function clearChat() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) {
        const chatMessages = document.getElementById('chat-messages');
        if (chatMessages) {
            chatMessages.innerHTML = '';
            localStorage.removeItem('chatHistory');
            
            // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
            const suggestionsContainer = document.getElementById('suggestions');
            if (suggestionsContainer) {
                suggestionsContainer.innerHTML = '';
                suggestionsContainer.style.display = 'none';
            }
        }
    }
}

function loadChatHistory() {
    try {
        const savedHistory = localStorage.getItem('chatHistory');
        if (savedHistory) {
            const history = JSON.parse(savedHistory);
            const chatMessages = document.getElementById('chat-messages');
            
            history.forEach(msg => {
                addMessage(msg.text, msg.isUser, msg.source);
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
}

function saveChatHistory() {
    try {
        const messages = [];
        const messageElements = document.querySelectorAll('.message');
        
        messageElements.forEach(el => {
            const isUser = el.classList.contains('user-message');
            const textElement = el.querySelector('.message-text');
            const sourceElement = el.querySelector('.message-source');
            
            if (textElement) {
                messages.push({
                    text: textElement.textContent,
                    isUser: isUser,
                    source: sourceElement ? (sourceElement.textContent.includes('–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π') ? 'knowledge_base' : 'yandex_gpt') : null
                });
            }
        });
        
        localStorage.setItem('chatHistory', JSON.stringify(messages));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
}

async function submitFeedback(question, feedback) {
    try {
        await fetch('/feedback', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                question: question,
                feedback: feedback
            })
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ feedback:', error);
    }
}

function setupCalculator() {
    const calculator = document.getElementById('calculator');
    const calcToggle = document.getElementById('calculator-button');
    const calcForm = document.getElementById('calc-form');
    const calcResult = document.getElementById('calc-result');
    const calcHistory = document.getElementById('calc-history');
    
    if (!calculator || !calcToggle) return;
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    loadCalcHistory();
    
    calcToggle.addEventListener('click', function() {
        calculator.style.display = calculator.style.display === 'none' ? 'block' : 'none';
    });
    
    if (calcForm) {
        calcForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const guests = parseInt(document.getElementById('calc-guests').value);
            const hours = parseInt(document.getElementById('calc-hours').value);
            const activity = document.getElementById('calc-activity').value;
            
            if (guests && hours) {
                const result = calculatePrice(guests, hours, activity);
                calcResult.innerHTML = `
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:</h4>
                    <p>–ì–æ—Å—Ç–∏: ${guests} —á–µ–ª.</p>
                    <p>–í—Ä–µ–º—è: ${hours} —á–∞—Å.</p>
                    <p>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${getActivityName(activity)}</p>
                    <p class="calc-total">–ò—Ç–æ–≥–æ: ${result.total} ‚ÇΩ</p>
                    <p class="calc-price">–¶–µ–Ω–∞ –∑–∞ –≥–æ—Å—Ç—è: ${result.pricePerGuest} ‚ÇΩ/—á–∞—Å</p>
                `;
                
                // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                saveToCalcHistory({
                    guests: guests,
                    hours: hours,
                    activity: activity,
                    total: result.total,
                    timestamp: new Date().toISOString()
                });
            }
        });
    }
}

function calculatePrice(guests, hours, activity) {
    const prices = {
        'vr': 300,
        'batuts': 500,
        'nerf': 700,
        'birthday': 1000,
        'events': 800
    };
    
    const pricePerGuest = prices[activity] || 500;
    const total = guests * hours * pricePerGuest;
    
    return {
        pricePerGuest: pricePerGuest,
        total: total
    };
}

function getActivityName(activity) {
    const names = {
        'vr': 'VR-–∑–æ–Ω—ã',
        'batuts': '–ë–∞—Ç—É—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
        'nerf': '–ù–µ—Ä—Ñ-–∞—Ä–µ–Ω–∞',
        'birthday': '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        'events': '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    };
    
    return names[activity] || activity;
}

function saveToCalcHistory(calculation) {
    try {
        let history = JSON.parse(localStorage.getItem('calcHistory') || '[]');
        history.unshift(calculation);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é 10 –∑–∞–ø–∏—Å—è–º–∏
        if (history.length > 10) {
            history = history.slice(0, 10);
        }
        
        localStorage.setItem('calcHistory', JSON.stringify(history));
        updateCalcHistoryDisplay();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
    }
}

function loadCalcHistory() {
    try {
        updateCalcHistoryDisplay();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
    }
}

function updateCalcHistoryDisplay() {
    const calcHistory = document.getElementById('calc-history');
    if (!calcHistory) return;
    
    try {
        const history = JSON.parse(localStorage.getItem('calcHistory') || '[]');
        
        if (history.length === 0) {
            calcHistory.innerHTML = '<p>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—É—Å—Ç–∞</p>';
            return;
        }
        
        calcHistory.innerHTML = '<h4>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:</h4>' + history.map(item => `
            <div class="calc-history-item">
                <p>${getActivityName(item.activity)}: ${item.guests} —á–µ–ª. √ó ${item.hours} —á–∞—Å.</p>
                <p class="calc-total-sm">${item.total} ‚ÇΩ</p>
                <small>${new Date(item.timestamp).toLocaleDateString('ru-RU')}</small>
            </div>
        `).join('');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
}

function toggleCalculator() {
    const calculator = document.getElementById('calculator');
    if (calculator) {
        calculator.style.display = calculator.style.display === 'none' ? 'block' : 'none';
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
window.chatFunctions = {
    sendMessage: sendMessage,
    addMessage: addMessage,
    clearChat: clearChat,
    loadDisplayMenu: loadDisplayMenu,
    handleMenuButtonClick: handleMenuButtonClick
};