# web_app.py
from flask import Flask, render_template, request, jsonify, redirect, url_for, session, flash
import os
import json
from datetime import datetime
from flask import Flask, render_template, request, jsonify, redirect, url_for, session, send_from_directory
from dotenv import load_dotenv
import requests
import time
import threading

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()

# --- –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", "super-secret-key")

# --- –†–æ—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏ ---
@app.route('/static/<path:path>')
def send_static(path):
    return send_from_directory('static', path)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOOKINGS_FILE = "bookings.json"
LOG_FILE = "bot_log.json"
bookings = []

# --- Yandex GPT ---
YANDEX_GPT_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
YANDEX_GPT_MODEL = "yandexgpt-lite"
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY", "AQVN1yUDXvnO8SFPcpT5yD4oWrQAol4Gx5GtQqYW")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID", "b1gl7ugev7botoao0fa6")

# --- –ê–¥–º–∏–Ω–∫–∞ ---
ADMIN_USER = os.getenv("ADMIN_USER", "admin")
ADMIN_PASS = os.getenv("ADMIN_PASS", "1")

# --- –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
conversation_history = {}

# --- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–∏–∑ —Ñ–∞–π–ª–∞) ---
KNOWLEDGE_BASE = {}

def load_knowledge_base():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    global KNOWLEDGE_BASE
    try:
        with open("knowledge_base.json", "r", encoding="utf-8") as f:
            KNOWLEDGE_BASE = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(KNOWLEDGE_BASE)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ knowledge_base.json")
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª knowledge_base.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")

# --- –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ---
def watch_kb_file():
    """–°–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ knowledge_base.json"""
    last_mod = 0
    while True:
        try:
            current_mod = os.path.getmtime("knowledge_base.json")
            if current_mod != last_mod:
                load_knowledge_base()
                print("üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                last_mod = current_mod
        except Exception as e:
            pass
        time.sleep(2)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
threading.Thread(target=watch_kb_file, daemon=True).start()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π ---
def load_bookings():
    global bookings
    try:
        with open(BOOKINGS_FILE, "r", encoding="utf-8") as f:
            bookings = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
    except FileNotFoundError:
        print("üìÅ –§–∞–π–ª bookings.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

def save_bookings():
    with open(BOOKINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(bookings, f, ensure_ascii=False, indent=4)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def log_interaction(question, answer, source):
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "question": question,
        "answer": answer,
        "source": source
    }
    try:
        logs = []
        if os.path.exists(LOG_FILE):
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
        logs.append(log_entry)
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=2)
        print(f"üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω: {source.upper()} ‚Üí '{question[:30]}...'")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

# --- –í—ã–∑–æ–≤ Yandex GPT —Å retry ---
def call_yandex_gpt(prompt, history=None):
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }

    messages = [{"role": "system", "text": (
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ FunLand. "
        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, —Å —ç–º–æ–¥–∑–∏. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö ‚Äî –æ—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ. "
        "–ï—Å–ª–∏ –æ –∏–≥—Ä–µ (Superhot, Aimcat) ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –≥–µ–π–º–µ—Ä. "
        "–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ü–µ–Ω—ã. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."
    )}]
    if history:
        messages.extend(history)
    messages.append({"role": "user", "text": prompt})

    payload = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/{YANDEX_GPT_MODEL}",
        "completionOptions": {"maxTokens": 1000, "temperature": 0.7},
        "messages": messages
    }

    for attempt in range(3):
        try:
            response = requests.post(YANDEX_GPT_API_URL, headers=headers, json=payload, timeout=10)
            if response.status_code == 200:
                result = response.json()
                return result["result"]["alternatives"][0]["message"]["text"]
            elif response.status_code == 401:
                return f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.json().get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            elif response.status_code == 400:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {response.json().get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {response.status_code}")
                time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {str(e)}")
            time.sleep(1)

    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Yandex GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –ú–∞—Ä—à—Ä—É—Ç—ã ---
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/ask", methods=["POST"])
def ask():
    data = request.get_json()
    question = data.get("question", "").strip().lower()
    user_id = data.get("user_id", "default")

    if user_id not in conversation_history:
        conversation_history[user_id] = []

    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    for key in KNOWLEDGE_BASE:
        if key in question:
            answer = KNOWLEDGE_BASE[key]
            conversation_history[user_id].append({"role": "user", "text": question})
            conversation_history[user_id].append({"role": "assistant", "text": answer})
            log_interaction(question, answer, "knowledge_base")
            return jsonify({"answer": answer})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Yandex GPT
    response = call_yandex_gpt(question, conversation_history[user_id])
    conversation_history[user_id].append({"role": "user", "text": question})
    conversation_history[user_id].append({"role": "assistant", "text": response})
    log_interaction(question, response, "yandex_gpt")
    return jsonify({"answer": response})

# --- –°—Ç—Ä–∞–Ω–∏—Ü—ã ---
@app.route("/booking", methods=["GET", "POST"])
def booking():
    if request.method == "POST":
        name = request.form.get("name")
        phone = request.form.get("phone")
        date = request.form.get("date")
        guests = request.form.get("guests")
        event_type = request.form.get("event_type")

        if not all([name, phone, date, guests, event_type]):
            return render_template("booking.html", error="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")

        new_booking = {
            "name": name,
            "phone": phone,
            "date": date,
            "guests": guests,
            "event_type": event_type,
            "created_at": datetime.now().strftime("%d.%m.%Y %H:%M")
        }
        bookings.append(new_booking)
        save_bookings()
        return render_template("booking.html", success="–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    return render_template("booking.html")

@app.route("/bookings")
def bookings_list():
    return render_template("bookings_list.html", bookings=bookings)

# --- –ê–¥–º–∏–Ω–∫–∞ ---
@app.route("/admin/login", methods=["GET", "POST"])
def admin_login():
    if request.method == "POST":
        if request.form.get("username") == ADMIN_USER and request.form.get("password") == ADMIN_PASS:
            session["admin_logged_in"] = True
            return redirect(url_for("admin_dashboard"))
        return render_template("admin/login.html", error="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    return render_template("admin/login.html")

@app.route("/admin")
def admin_dashboard():
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    return render_template("admin/dashboard.html", bookings=bookings)

@app.route("/admin/knowledge")
def knowledge_edit():
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    return render_template("admin/knowledge_edit.html", knowledge=KNOWLEDGE_BASE)

@app.route("/admin/knowledge/save", methods=["POST"])
def save_knowledge():
    if not session.get("admin_logged_in"):
        return jsonify({"status": "error", "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"})
    
    data = {k: v.strip() for k, v in request.form.items() if v.strip()}
    
    try:
        with open("knowledge_base.json", "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        load_knowledge_base()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        return jsonify({"status": "success", "message": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route("/admin/logout")
def admin_logout():
    session.pop("admin_logged_in", None)
    return redirect(url_for("index"))

# --- –ó–∞–ø—É—Å–∫ ---
load_knowledge_base()
load_bookings()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
    
    
# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–≤—Å—Ç—Ä–æ–µ–Ω–æ –≤ –∞–¥–º–∏–Ω–∫—É) ---

@app.route("/admin/knowledge", methods=["GET", "POST"])
def knowledge_edit():
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))

    global KNOWLEDGE_BASE

    if request.method == "POST":
        action = request.form.get("action")

        if action == "add":
            question = request.form.get("question", "").strip().lower()
            answer = request.form.get("answer", "").strip()
            if question and answer and question not in KNOWLEDGE_BASE:
                KNOWLEDGE_BASE[question] = answer
                save_knowledge_base()
                flash("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω", "success")
            else:
                flash("‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π", "error")

        elif action == "edit":
            question = request.form.get("question", "").strip().lower()
            answer = request.form.get("answer", "").strip()
            if question in KNOWLEDGE_BASE and answer:
                KNOWLEDGE_BASE[question] = answer
                save_knowledge_base()
                flash("‚úÖ –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω", "success")
            else:
                flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç", "error")

        elif action == "delete":
            question = request.form.get("question", "").strip().lower()
            if question in KNOWLEDGE_BASE:
                del KNOWLEDGE_BASE[question]
                save_knowledge_base()
                flash("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω", "success")
            else:
                flash("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")

    return render_template("admin/knowledge_edit.html", knowledge=KNOWLEDGE_BASE)