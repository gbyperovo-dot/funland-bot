# web_app.py
from flask import Flask, render_template, request, jsonify, redirect, url_for, session, flash, send_from_directory
import os
import json
import time
import shutil
from datetime import datetime
from dotenv import load_dotenv
import requests
import socket
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    filename='audit.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()

# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", "super-secret-key-for-d-space-bot")

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
KNOWLEDGE_BASE = {}
BOOKINGS = []
conversation_history = {}
LOG_FILE = "bot_log.json"
BACKUPS_DIR = "backups"
os.makedirs(BACKUPS_DIR, exist_ok=True)

# --- –ü—É—Ç–∏ ---
KNOWLEDGE_FILE = "knowledge_base.json"
BOOKINGS_FILE = "bookings.json"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def load_knowledge_base():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ JSON"""
    global KNOWLEDGE_BASE
    if os.path.exists(KNOWLEDGE_FILE):
        try:
            with open(KNOWLEDGE_FILE, "r", encoding="utf-8") as f:
                KNOWLEDGE_BASE = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(KNOWLEDGE_BASE)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {KNOWLEDGE_FILE}")
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(KNOWLEDGE_BASE)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª knowledge_base.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logging.warning("–§–∞–π–ª knowledge_base.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def save_knowledge_base():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ JSON + —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"""
    try:
        # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = os.path.join(BACKUPS_DIR, f"knowledge_base_{timestamp}.json")
        shutil.copy2(KNOWLEDGE_FILE, backup_path)
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        with open(KNOWLEDGE_FILE, "w", encoding="utf-8") as f:
            json.dump(KNOWLEDGE_BASE, f, ensure_ascii=False, indent=4)
        print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        logging.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")

def load_bookings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global BOOKINGS
    if os.path.exists(BOOKINGS_FILE):
        try:
            with open(BOOKINGS_FILE, "r", encoding="utf-8") as f:
                BOOKINGS = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(BOOKINGS)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(BOOKINGS)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
    else:
        BOOKINGS = []

def log_interaction(question, answer, source):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ bot_log.json"""
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "question": question,
        "answer": answer,
        "source": source
    }
    try:
        logs = []
        if os.path.exists(LOG_FILE):
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
        logs.append(log_entry)
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def call_yandex_gpt(prompt, history=None):
    """–í—ã–∑–æ–≤ Yandex GPT —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã –≤ URL
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {os.getenv('YANDEX_API_KEY')}",
        "x-folder-id": os.getenv("YANDEX_FOLDER_ID"),
        "Content-Type": "application/json"
    }
    messages = [{"role": "system", "text": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç D-Space. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, —Å —ç–º–æ–¥–∑–∏."}]
    if history:
        messages.extend(history)
    messages.append({"role": "user", "text": prompt})

    payload = {
        "modelUri": f"gpt://{os.getenv('YANDEX_FOLDER_ID')}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.3,
            "maxTokens": 1000
        },
        "messages": messages
    }

    for attempt in range(3):
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=10)
            if response.status_code == 200:
                return response.json()["result"]["alternatives"][0]["message"]["text"]
            elif response.status_code == 401:
                return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á."
            elif response.status_code == 400:
                return "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ folder_id."
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {response.status_code}")
                time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {str(e)}")
            time.sleep(1)
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
load_knowledge_base()
load_bookings()

# --- –ú–∞—Ä—à—Ä—É—Ç—ã ---

@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞"""
    return render_template("index.html")

@app.route("/ask", methods=["POST"])
def ask():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.get_json()
    question = data.get("question", "").strip().lower().rstrip("?")
    user_id = data.get("user_id", "default")

    if user_id not in conversation_history:
        conversation_history[user_id] = []

    conversation_history[user_id].append({"role": "user", "text": question})
    if len(conversation_history[user_id]) > 10:
        conversation_history[user_id] = conversation_history[user_id][-10:]

    if question in KNOWLEDGE_BASE:
        answer = KNOWLEDGE_BASE[question]
        conversation_history[user_id].append({"role": "assistant", "text": answer})
        log_interaction(question, answer, "knowledge_base")
        return jsonify({"answer": answer})

    gpt_answer = call_yandex_gpt(question, conversation_history[user_id])
    conversation_history[user_id].append({"role": "assistant", "text": gpt_answer})
    log_interaction(question, gpt_answer, "yandex_gpt")
    return jsonify({"answer": gpt_answer})

@app.route('/feedback', methods=['POST'])
def feedback():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.get_json()
    feedback_file = "feedback.json"
    try:
        logs = []
        if os.path.exists(feedback_file):
            with open(feedback_file, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
        logs.append(data)
        with open(feedback_file, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=4)
        return jsonify({"status": "ok"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route("/admin/login", methods=["GET", "POST"])
def admin_login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        if username == os.getenv("ADMIN_USER", "admin") and password == os.getenv("ADMIN_PASS", "1"):
            session["admin_logged_in"] = True
            logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É")
            return redirect(url_for("admin_dashboard"))
        flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "error")
        logging.warning("–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É")
    return render_template("admin/login.html")

@app.route("/admin")
def admin_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    return render_template("admin/dashboard.html", bookings=BOOKINGS)

@app.route("/admin/knowledge", methods=["GET", "POST"])
def knowledge_edit():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))

    if request.method == "POST":
        action = request.form.get("action")
        question = request.form.get("question", "").strip().lower()
        answer = request.form.get("answer", "").strip()

        if action == "add":
            if not question or not answer:
                flash("‚ùå –í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏", "error")
            elif question in KNOWLEDGE_BASE:
                flash("‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "error")
            else:
                KNOWLEDGE_BASE[question] = answer
                save_knowledge_base()
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å: '{question}'")
                flash("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω", "success")

        elif action == "edit":
            if question in KNOWLEDGE_BASE and answer:
                KNOWLEDGE_BASE[question] = answer
                save_knowledge_base()
                logging.info(f"–ò–∑–º–µ–Ω—ë–Ω –≤–æ–ø—Ä–æ—Å: '{question}'")
                flash("‚úÖ –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω", "success")
            else:
                flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "error")

        elif action == "delete":
            if question in KNOWLEDGE_BASE:
                del KNOWLEDGE_BASE[question]
                save_knowledge_base()
                logging.info(f"–£–¥–∞–ª—ë–Ω –≤–æ–ø—Ä–æ—Å: '{question}'")
                flash("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω", "success")
            else:
                flash("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")

    load_knowledge_base()
    return render_template("admin/knowledge_edit.html", knowledge=KNOWLEDGE_BASE)

@app.route("/admin/logs")
def view_logs():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))

    logs = []
    if os.path.exists(LOG_FILE):
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
            logs = sorted(logs, key=lambda x: x["timestamp"], reverse=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            flash("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤", "error")

    return render_template("admin/logs.html", logs=logs)

@app.route("/admin/edit_response", methods=["POST"])
def edit_response():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤ ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    if not session.get("admin_logged_in"):
        return jsonify({"status": "error", "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"})

    question = request.form.get("question", "").strip().lower()
    new_answer = request.form.get("answer", "").strip()

    import json as json_module
    try:
        new_answer = json_module.loads(f'"{new_answer}"')
    except:
        pass

    if not question or not new_answer:
        return jsonify({"status": "error", "message": "–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"})

    KNOWLEDGE_BASE[question] = new_answer
    save_knowledge_base()
    logging.info(f"–û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É: '{question}'")

    return jsonify({"status": "success", "message": "–û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"})

@app.route("/admin/export_logs")
def export_logs():
    """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    if os.path.exists(LOG_FILE):
        return send_from_directory(".", "bot_log.json", as_attachment=True)
    flash("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
    return redirect(url_for("view_logs"))

@app.route("/admin/logout")
def admin_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    session.pop("admin_logged_in", None)
    flash("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", "info")
    logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    return redirect(url_for("index"))

@app.route("/static/<path:path>")
def send_static(path):
    """–†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏"""
    return send_from_directory("static", path)

@app.route("/booking", methods=["GET", "POST"])
def booking():
    """–§–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if request.method == "POST":
        name = request.form.get("name")
        phone = request.form.get("phone")
        date = request.form.get("date")
        guests = request.form.get("guests")
        event_type = request.form.get("event_type")
        if not all([name, phone, date, guests, event_type]):
            return render_template("booking.html", error="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
        new_booking = {
            "name": name,
            "phone": phone,
            "date": date,
            "guests": guests,
            "event_type": event_type,
            "created_at": datetime.now().strftime("%d.%m.%Y %H:%M")
        }
        BOOKINGS.append(new_booking)
        with open(BOOKINGS_FILE, "w", encoding="utf-8") as f:
            json.dump(BOOKINGS, f, ensure_ascii=False, indent=4)
        logging.info(f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å: {name}, {phone}")
        return render_template("booking.html", success="–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    return render_template("booking.html")

@app.route("/birthday_calc")
def birthday_calc():
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    return render_template("birthday_calc.html")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP ---
def get_local_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        return "192.168.0.100"

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    host = "0.0.0.0"
    local_ip = get_local_ip()

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(KNOWLEDGE_BASE)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {KNOWLEDGE_FILE}")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(BOOKINGS)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
    print("üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    print(f"* Running on all addresses ({host})")
    print(f"* Running on http://127.0.0.1:{port}")
    print(f"* Running on http://{local_ip}:{port}")
    print("Press CTRL+C to quit")

    app.run(host=host, port=port, debug=False)