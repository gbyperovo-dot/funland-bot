<!-- templates/admin/menu_edit.html -->
{% extends "admin/base.html" %}

{% block content %}
<div class="container-fluid">
    <h2>Управление меню</h2>
    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Добавить новую кнопку</h5>
                </div>
                <div class="card-body">
                    <form id="addMenuForm">
                        <div class="mb-3">
                            <label for="admin_text" class="form-label">Текст в админке:</label>
                            <input type="text" class="form-control" id="admin_text" name="admin_text" required>
                            <div class="form-text">Название для удобства управления в админке</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="display_text" class="form-label">Текст на кнопке:</label>
                            <input type="text" class="form-control" id="display_text" name="display_text" required>
                            <div class="form-text">Текст, который увидит пользователь (например: "VR-зоны — от 300 ₽")</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="question" class="form-label">Вопрос для бота:</label>
                            <input type="text" class="form-control" id="question" name="question" required>
                            <div class="form-text">Вопрос, который отправится боту при нажатии</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="category" class="form-label">Категория:</label>
                            <select class="form-select" id="category" name="category" required>
                                <option value="">Выберите категорию</option>
                                {% if categories.system_categories %}
                                    {% for category_key, category_name in categories.system_categories.items() %}
                                    <option value="{{ category_key }}">{{ category_name }}</option>
                                    {% endfor %}
                                {% endif %}
                                {% if categories.custom_categories %}
                                    {% for category_key, category_name in categories.custom_categories.items() %}
                                    <option value="{{ category_key }}">{{ category_name }}</option>
                                    {% endfor %}
                                {% endif %}
                            </select>
                            <div class="form-text">
                                <a href="/admin/menu/categories" target="_blank">Управление категориями</a>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="price_info" class="form-label">Информация о цене:</label>
                            <input type="text" class="form-control" id="price_info" name="price_info" placeholder="от 300 ₽">
                            <div class="form-text">Дополнительная информация о цене (необязательно)</div>
                        </div>
                        
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Добавить кнопку
                        </button>
                        
                        <button type="button" class="btn btn-outline-secondary ms-2" onclick="loadCategories()">
                            <i class="bi bi-arrow-clockwise"></i> Обновить категории
                        </button>
                    </form>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Существующие кнопки меню</h5>
                    <span class="badge bg-primary">{{ menu_items|length }} кнопок</span>
                </div>
                <div class="card-body">
                    {% if menu_items %}
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Текст в админке</th>
                                    <th>Текст на кнопке</th>
                                    <th>Вопрос</th>
                                    <th>Категория</th>
                                    <th>Действия</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in menu_items %}
                                <tr>
                                    <td>{{ item.admin_text }}</td>
                                    <td>{{ item.display_text }}</td>
                                    <td><code>{{ item.question }}</code></td>
                                    <td>
                                        <span class="badge bg-secondary">
                                            {% if categories.system_categories and item.category in categories.system_categories %}
                                                {{ categories.system_categories[item.category] }}
                                            {% elif categories.custom_categories and item.category in categories.custom_categories %}
                                                {{ categories.custom_categories[item.category] }}
                                            {% else %}
                                                {{ item.category }}
                                            {% endif %}
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-warning" onclick="editMenuItem({{ loop.index0 }})">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" onclick="deleteMenuItem({{ loop.index0 }})">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    {% else %}
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> Нет добавленных кнопок меню. Добавьте первую кнопку используя форму слева.
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно редактирования -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактирование кнопки меню</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editMenuForm">
                    <input type="hidden" id="edit_index" name="index">
                    <div class="mb-3">
                        <label for="edit_admin_text" class="form-label">Текст в админке:</label>
                        <input type="text" class="form-control" id="edit_admin_text" name="admin_text" required>
                    </div>
                    <div class="mb-3">
                        <label for="edit_display_text" class="form-label">Текст на кнопке:</label>
                        <input type="text" class="form-control" id="edit_display_text" name="display_text" required>
                    </div>
                    <div class="mb-3">
                        <label for="edit_question" class="form-label">Вопрос для бота:</label>
                        <input type="text" class="form-control" id="edit_question" name="question" required>
                    </div>
                    <div class="mb-3">
                        <label for="edit_category" class="form-label">Категория:</label>
                        <select class="form-select" id="edit_category" name="category" required>
                            <option value="">Выберите категорию</option>
                            {% if categories.system_categories %}
                                {% for category_key, category_name in categories.system_categories.items() %}
                                <option value="{{ category_key }}">{{ category_name }}</option>
                                {% endfor %}
                            {% endif %}
                            {% if categories.custom_categories %}
                                {% for category_key, category_name in categories.custom_categories.items() %}
                                <option value="{{ category_key }}">{{ category_name }}</option>
                                {% endfor %}
                            {% endif %}
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit_price_info" class="form-label">Информация о цене:</label>
                        <input type="text" class="form-control" id="edit_price_info" name="price_info">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="saveEdit()">
                    <i class="bi bi-check-circle"></i> Сохранить
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно подтверждения удаления -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Подтверждение удаления</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Вы уверены, что хотите удалить эту кнопку меню?</p>
                <p id="deleteItemInfo" class="text-danger fw-bold"></p>
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle"></i> Это действие нельзя отменить!
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">
                    <i class="bi bi-trash"></i> Удалить
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// Глобальные переменные для управления состоянием
let currentDeleteIndex = null;
let categoriesData = {
    system_categories: {
        {% for key, name in categories.system_categories.items() %}
        "{{ key }}": "{{ name }}"{% if not loop.last %},{% endif %}
        {% endfor %}
    },
    custom_categories: {
        {% for key, name in categories.custom_categories.items() %}
        "{{ key }}": "{{ name }}"{% if not loop.last %},{% endif %}
        {% endfor %}
    }
};

// 🔄 Функция загрузки категорий
async function loadCategories() {
    try {
        showNotification('Обновление категорий...', 'info');
        
        const response = await fetch('/admin/menu/categories/data');
        if (!response.ok) {
            throw new Error('Ошибка загрузки категорий');
        }
        
        categoriesData = await response.json();
        updateCategoryDropdowns(categoriesData);
        showNotification('Категории обновлены', 'success');
        
    } catch (error) {
        console.error('Ошибка загрузки категорий:', error);
        showNotification('Ошибка обновления категорий', 'error');
    }
}

// 🔄 Обновление dropdown-ов категорий
function updateCategoryDropdowns(categories) {
    const dropdowns = [
        document.getElementById('category'),
        document.getElementById('edit_category')
    ];
    
    dropdowns.forEach(dropdown => {
        if (dropdown) {
            // Сохраняем текущее значение
            const currentValue = dropdown.value;
            
            // Очищаем options (кроме первого)
            const optionsToKeep = [dropdown.options[0]];
            for (let i = dropdown.options.length - 1; i >= 1; i--) {
                dropdown.remove(i);
            }
            
            // Добавляем системные категории
            if (categories.system_categories) {
                for (const [key, name] of Object.entries(categories.system_categories)) {
                    const option = document.createElement('option');
                    option.value = key;
                    option.textContent = name;
                    dropdown.appendChild(option);
                }
            }
            
            // Добавляем пользовательские категории
            if (categories.custom_categories) {
                for (const [key, name] of Object.entries(categories.custom_categories)) {
                    const option = document.createElement('option');
                    option.value = key;
                    option.textContent = name;
                    dropdown.appendChild(option);
                }
            }
            
            // Восстанавливаем значение
            if (currentValue) {
                const optionExists = Array.from(dropdown.options).some(opt => opt.value === currentValue);
                if (optionExists) {
                    dropdown.value = currentValue;
                }
            }
        }
    });
}

// 🔄 Получение данных категорий
async function getCategoriesData() {
    try {
        const response = await fetch('/admin/menu/categories/data');
        if (!response.ok) {
            throw new Error('Ошибка получения категорий');
        }
        return await response.json();
    } catch (error) {
        console.error('Ошибка получения категорий:', error);
        return categoriesData; // Возвращаем старые данные при ошибке
    }
}

// 🔄 Проверка существования категории
function validateCategory(categoryKey, categories) {
    return (categories.system_categories && categories.system_categories[categoryKey]) ||
           (categories.custom_categories && categories.custom_categories[categoryKey]);
}

// Добавление новой кнопки
document.getElementById('addMenuForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = this.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Добавление...';
    
    try {
        const formData = new FormData(this);
        
        // 🔄 Получаем актуальные категории
        const categories = await getCategoriesData();
        const selectedCategory = formData.get('category');
        
        // Проверяем, существует ли выбранная категория
        if (!validateCategory(selectedCategory, categories)) {
            showNotification('Ошибка: выбранная категория не существует', 'error');
            return;
        }
        
        const response = await fetch('/admin/menu/add', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        if (result.success) {
            showNotification('Кнопка успешно добавлена!', 'success');
            setTimeout(() => location.reload(), 1000);
        } else {
            showNotification('Ошибка: ' + result.error, 'error');
        }
    } catch (error) {
        showNotification('Ошибка сети: ' + error.message, 'error');
    } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="bi bi-plus-circle"></i> Добавить кнопку';
    }
});

// Редактирование кнопки
function editMenuItem(index) {
    const menuItems = {{ menu_items|tojson|safe }};
    const item = menuItems[index];
    
    document.getElementById('edit_index').value = index;
    document.getElementById('edit_admin_text').value = item.admin_text || '';
    document.getElementById('edit_display_text').value = item.display_text || '';
    document.getElementById('edit_question').value = item.question || '';
    document.getElementById('edit_category').value = item.category || '';
    document.getElementById('edit_price_info').value = item.price_info || '';
    
    // 🔄 Обновляем dropdown категорий перед открытием
    updateCategoryDropdowns(categoriesData);
    
    new bootstrap.Modal(document.getElementById('editModal')).show();
}

// Сохранение редактирования
async function saveEdit() {
    const saveBtn = document.querySelector('#editModal .btn-primary');
    saveBtn.disabled = true;
    saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Сохранение...';
    
    try {
        const formData = new FormData(document.getElementById('editMenuForm'));
        const index = formData.get('index');
        
        // 🔄 Получаем актуальные категории
        const categories = await getCategoriesData();
        const selectedCategory = formData.get('category');
        
        // Проверяем категорию
        if (!validateCategory(selectedCategory, categories)) {
            showNotification('Ошибка: выбранная категория не существует', 'error');
            return;
        }
        
        const response = await fetch(`/admin/menu/edit/${index}`, {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        if (result.success) {
            showNotification('Изменения сохранены!', 'success');
            document.getElementById('editModal').querySelector('.btn-close').click();
            setTimeout(() => location.reload(), 1000);
        } else {
            showNotification('Ошибка: ' + result.error, 'error');
        }
    } catch (error) {
        showNotification('Ошибка сети: ' + error.message, 'error');
    } finally {
        saveBtn.disabled = false;
        saveBtn.innerHTML = '<i class="bi bi-check-circle"></i> Сохранить';
    }
}

// Подготовка к удалению кнопки
function deleteMenuItem(index) {
    const menuItems = {{ menu_items|tojson|safe }};
    const item = menuItems[index];
    
    currentDeleteIndex = index;
    document.getElementById('deleteItemInfo').textContent = 
        `${item.admin_text} → ${item.question}`;
    
    new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
}

// Подтверждение удаления
async function confirmDelete() {
    const deleteBtn = document.querySelector('#deleteConfirmModal .btn-danger');
    deleteBtn.disabled = true;
    deleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Удаление...';
    
    try {
        const response = await fetch(`/admin/menu/delete/${currentDeleteIndex}`);
        const result = await response.json();
        
        if (result.success) {
            showNotification('Кнопка удалена!', 'success');
            document.getElementById('deleteConfirmModal').querySelector('.btn-close').click();
            setTimeout(() => location.reload(), 1000);
        } else {
            showNotification('Ошибка: ' + result.error, 'error');
        }
    } catch (error) {
        showNotification('Ошибка сети: ' + error.message, 'error');
    } finally {
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = '<i class="bi bi-trash"></i> Удалить';
        currentDeleteIndex = null;
    }
}

// Валидация формы
document.getElementById('addMenuForm').addEventListener('input', function(e) {
    const questionInput = document.getElementById('question');
    if (e.target === questionInput) {
        // Автоматически заполняем display_text на основе question
        const displayTextInput = document.getElementById('display_text');
        if (!displayTextInput.value && questionInput.value) {
            displayTextInput.value = questionInput.value;
        }
    }
});

// Функция показа уведомлений
function showNotification(message, type = 'info') {
    // Удаляем старые уведомления
    const oldNotifications = document.querySelectorAll('.alert-position');
    oldNotifications.forEach(el => el.remove());
    
    // Создаем элемент уведомления
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} alert-dismissible fade show alert-position`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1060;
        min-width: 300px;
        max-width: 400px;
    `;
    notification.innerHTML = `
        <i class="bi bi-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'} me-2"></i>
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(notification);
    
    // Автоматическое закрытие через 5 секунд
    setTimeout(() => {
        if (notification.parentNode) {
            const bsAlert = new bootstrap.Alert(notification);
            bsAlert.close();
        }
    }, 5000);
}

// Инициализация при загрузке страницы
document.addEventListener('DOMContentLoaded', function() {
    console.log('Категории при загрузке:', categoriesData);
    
    // 🔄 Обновляем категории каждые 30 секунд
    setInterval(loadCategories, 30000);
    
    // 🔄 Обновляем категории при возвращении на страницу
    document.addEventListener('visibilitychange', function() {
        if (!document.hidden) {
            loadCategories();
        }
    });
    
    // 🔄 Кнопка ручного обновления
    const refreshBtn = document.querySelector('[onclick="loadCategories()"]');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', loadCategories);
    }
});

// Обработка ошибок
window.addEventListener('error', function(e) {
    console.error('Global error:', e.error);
    showNotification('Произошла ошибка при загрузке данных', 'error');
});
</script>

<style>
.alert-position {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1060;
    min-width: 300px;
    max-width: 400px;
}

.menu-btn {
    transition: all 0.3s ease;
}

.menu-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.table th {
    background-color: #f8f9fa;
    border-top: none;
}

.card {
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    border: 1px solid #e9ecef;
}

.card-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-bottom: none;
}

.spinner-border-sm {
    width: 1rem;
    height: 1rem;
}

.badge {
    font-size: 0.75em;
}

code {
    background: #f8f9fa;
    padding: 2px 6px;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
}
</style>
{% endblock %}