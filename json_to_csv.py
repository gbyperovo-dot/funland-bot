#!/usr/bin/env python3
# json_to_csv.py
import json
import csv
import os
import shutil
from collections import OrderedDict
from datetime import datetime

def create_backup(file_path):
    """–°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ —Å timestamp"""
    backup_dir = "backups"
    os.makedirs(backup_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{backup_dir}/{os.path.basename(file_path)}_{timestamp}.bak"
    shutil.copy2(file_path, backup_name)
    return backup_name

def json_to_csv(json_path, csv_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç JSON –≤ CSV –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é CSV, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(csv_path):
            backup = create_backup(csv_path)
            print(f"üîê –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è CSV: {backup}")

        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f, object_pairs_hook=OrderedDict)
        
        with open(csv_path, 'w', encoding='utf-8-sig', newline='') as f:
            writer = csv.writer(f, delimiter=';')
            writer.writerow(["Question", "Answer"])  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            for question, answer in data.items():
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è CSV
                answer_cleaned = answer.replace('\n', '<br>')
                writer.writerow([question, answer_cleaned])
        
        print(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {csv_path}")
        print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:")
        print("- –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –í–æ–ø—Ä–æ—Å;–û—Ç–≤–µ—Ç")
        print("- –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <br>")
        print("- –ù–µ —É–¥–∞–ª—è–π—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
        print("- –ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ csv_to_json.py")
        
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {type(e).__name__}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        return False

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä JSON –≤ CSV –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--json', default='knowledge_base.json', help='–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É')
    parser.add_argument('--csv', default='knowledge_edit.csv', help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV')
    args = parser.parse_args()

    if not os.path.exists(args.json):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.json}")
        exit(1)

    success = json_to_csv(args.json, args.csv)
    if not success:
        exit(1)