# web_app.py
import os
import json
from datetime import datetime
from flask import Flask, render_template, request, jsonify, redirect, url_for, session, send_from_directory
from dotenv import load_dotenv
import requests
import time

# 1. –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", "super-secret-key")

# 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# 3. –†–æ—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏
@app.route('/static/<path:path>')
def send_static(path):
    return send_from_directory('static', path)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOOKINGS_FILE = "bookings.json"
LOG_FILE = "bot_log.json"
bookings = []

# --- Yandex GPT ---
YANDEX_GPT_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
YANDEX_GPT_MODEL = "yandexgpt-lite"
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY", "AQVN1yUDXvnO8SFPcpT5yD4oWrQAol4Gx5GtQqYW")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID", "b1gl7ugev7botoao0fa6")

# --- –ê–¥–º–∏–Ω–∫–∞ ---
ADMIN_USER = os.getenv("ADMIN_USER", "admin")
ADMIN_PASS = os.getenv("ADMIN_PASS", "1")

# --- –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
conversation_history = {}

# --- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ---
KNOWLEDGE_BASE = {
    "–º–µ–Ω—é": (
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É:\n"
        "‚Ä¢ `vr`\n"
        "‚Ä¢ `–±–∞—Ç—É—Ç—ã`\n"
        "‚Ä¢ `–Ω–µ—Ä—Ñ`\n"
        "‚Ä¢ `–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è`\n"
        "‚Ä¢ `–≤—ã–ø—É—Å–∫–Ω—ã–µ`\n"
        "‚Ä¢ `–≤—ã–µ–∑–¥–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è`\n"
        "‚Ä¢ `–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å`\n"
        "‚Ä¢ `–∞–∫—Ü–∏–∏`\n"
        "‚Ä¢ `—Ü–µ–Ω—ã`"
    ),
    "vr": (
        "üéÆ **VR-–∑–æ–Ω—ã**\n\n"
        "–ò–≥—Ä—ã –≤ —à–ª–µ–º–∞—Ö HTC Vive –∏ Oculus.\n"
        "–ú–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –≤–¥–≤–æ—ë–º!\n"
        "–¶–µ–Ω—ã: 300 ‚ÇΩ –∑–∞ 30 –º–∏–Ω, 500 ‚ÇΩ –∑–∞ —á–∞—Å, 900 ‚ÇΩ –∑–∞ 2 —á–∞—Å–∞.\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: [VR-–∑–æ–Ω—ã](/vr_zones)"
    ),
    "–±–∞—Ç—É—Ç—ã": (
        "üèÄ **–ë–∞—Ç—É—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä**\n\n"
        "–ü–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –∏–≥—Ä –∏ —Ç—Ä—é–∫–æ–≤ –Ω–∞ –±–∞—Ç—É—Ç–∞—Ö.\n\n"
        "**–¶–µ–Ω—ã:**\n"
        "- 500 ‚ÇΩ –∑–∞ —á–∞—Å\n"
        "- 4000 ‚ÇΩ –∑–∞ 10 –ø–æ—Å–µ—â–µ–Ω–∏–π\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: [–ë–∞—Ç—É—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä](/batuts_center)"
    ),
    "–Ω–µ—Ä—Ñ": (
        "üî´ **–ù–µ—Ä—Ñ-–∞—Ä–µ–Ω–∞**\n\n"
        "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –±–∞—Ç–∞–ª–∏–∏ —Å –º—è–≥–∫–∏–º–∏ –¥—Ä–æ—Ç–∏–∫–∞–º–∏.\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–æ 6 —á–µ–ª–æ–≤–µ–∫.\n"
        "–¶–µ–Ω—ã: 2500 ‚ÇΩ (–¥–æ 6 —á–µ–ª), 3500 ‚ÇΩ (–¥–æ 8 —á–µ–ª).\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: [–ù–µ—Ä—Ñ-–∞—Ä–µ–Ω–∞](/nerf_arena)"
    ),
    "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è": (
        "üéâ **–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ FunLand**\n\n"
        "–ú—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º —è—Ä–∫–∏–µ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö!\n\n"
        "**–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:**\n"
        "- –ê–Ω–∏–º–∞—Ç–æ—Ä –∏–ª–∏ –≤–µ–¥—É—â–∏–π\n"
        "- –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n"
        "- –ò–≥—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–±–∞—Ç—É—Ç—ã, –Ω–µ—Ä—Ñ, VR)\n"
        "- –ß–∞–µ–ø–∏—Ç–∏–µ —Å —Ç–æ—Ä—Ç–æ–º\n"
        "- –§–æ—Ç–æ –Ω–∞ –ø–∞–º—è—Ç—å\n\n"
        "**–ü–∞–∫–µ—Ç—ã:**\n"
        "- –°—Ç–∞–Ω–¥–∞—Ä—Ç: 8000 ‚ÇΩ (–¥–æ 10 —á–µ–ª–æ–≤–µ–∫)\n"
        "- –≠–∫—Å—Ç—Ä–∏–º: 12 000 ‚ÇΩ (–¥–æ 12 —á–µ–ª–æ–≤–µ–∫)\n"
        "- VR-–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ: 15 000 ‚ÇΩ (–¥–æ 8 —á–µ–ª–æ–≤–µ–∫)\n\n"
        "–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ: *¬´—Ö–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è¬ª*"
    ),
    "–≤—ã–ø—É—Å–∫–Ω—ã–µ": (
        "üéì **–í—ã–ø—É—Å–∫–Ω—ã–µ –≤ FunLand**\n\n"
        "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—ã–ø—É—Å–∫–Ω–æ–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ ‚Äî —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏, VR –∏ –≤–µ—Å—ë–ª–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π!\n\n"
        "**–ß—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:**\n"
        "- –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n"
        "- –ö–æ–º–∞–Ω–¥–Ω—ã–µ –∏–≥—Ä—ã (–Ω–µ—Ä—Ñ, –±–∞—Ç—É—Ç—ã)\n"
        "- VR-–∫–≤–µ—Å—Ç—ã\n"
        "- –§–æ—Ç–æ–∑–æ–Ω–∞ –∏ –≤–∏–¥–µ–æ—Å—ä—ë–º–∫–∞\n"
        "- –ö–æ—Ñ–µ–π–Ω–∞—è –ø–∞—É–∑–∞ —Å –¥–µ—Å–µ—Ä—Ç–∞–º–∏\n\n"
        "**–¶–µ–Ω—ã:**\n"
        "- –û—Ç 1500 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞ (–º–∏–Ω–∏–º—É–º 15 —á–µ–ª–æ–≤–µ–∫)\n"
        "- –°–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ 20+ —á–µ–ª–æ–≤–µ–∫\n\n"
        "–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—ã–ø—É—Å–∫–Ω—ã—Ö 9-—Ö –∏ 11-—Ö –∫–ª–∞—Å—Å–æ–≤!"
    ),
    "–≤—ã–µ–∑–¥–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è": (
        "üöê **–í—ã–µ–∑–¥–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è**\n\n"
        "–ú—ã –ø—Ä–∏–µ–∑–∂–∞–µ–º –∫ –≤–∞–º! –ü—Ä–æ–≤–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã, –Ω–µ—Ä—Ñ-–±–∞—Ç–ª—ã –∏ VR-—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –≤–∞—à–µ–π –ø–ª–æ—â–∞–¥–∫–µ.\n\n"
        "**–ì–¥–µ –º–æ–∂–Ω–æ:**\n"
        "- –®–∫–æ–ª—ã –∏ –¥–µ—Ç—Å–∫–∏–µ —Å–∞–¥—ã\n"
        "- –ü–∞—Ä–∫–∏ –∏ —Å–∫–≤–µ—Ä—ã\n"
        "- –î–æ–º–∞ –æ—Ç–¥—ã—Ö–∞ –∏ –ª–∞–≥–µ—Ä—è\n"
        "- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
        "**–ß—Ç–æ –≤–µ–∑—ë–º:**\n"
        "- –ü–µ—Ä–µ–Ω–æ—Å–Ω—ã–µ –±–∞—Ç—É—Ç—ã\n"
        "- –ù–µ—Ä—Ñ-–∞—Ä–µ–Ω–∞ (–¥–æ 8 —á–µ–ª–æ–≤–µ–∫)\n"
        "- VR-—à–ª–µ–º—ã (–¥–æ 4 —Å—Ç–∞–Ω—Ü–∏–π)\n"
        "- –í–µ–¥—É—â–∏–π –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n\n"
        "**–¶–µ–Ω—ã:**\n"
        "- –û—Ç 10 000 ‚ÇΩ –∑–∞ 3 —á–∞—Å–∞\n"
        "- –î–æ–ø–ª–∞—Ç–∞ 1000 ‚ÇΩ –∑–∞ –∫–∞–∂–¥—ã–µ 10 –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞\n\n"
        "–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–æ–≤!"
    ),
    "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å": (
        "üìÖ **–§–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ [—Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è](/booking)\n"
        "–£–∫–∞–∂–∏—Ç–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–∞—Ç—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è.\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    ),
    "–∞–∫—Ü–∏–∏": (
        "üéÅ **–ê–∫—Ü–∏–∏**\n\n"
        "‚Ä¢ –î–µ—Ç—è–º –¥–æ 7 –ª–µ—Ç ‚Äî **50% —Å–∫–∏–¥–∫–∞**\n"
        "‚Ä¢ –°–µ–º–µ–π–Ω—ã–π –ø–∞–∫–µ—Ç ‚Äî **+ VR –±–µ—Å–ø–ª–∞—Ç–Ω–æ**\n"
        "‚Ä¢ –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –¥–µ–Ω—å ‚Äî **-20% –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º**"
    ),
    "—Ü–µ–Ω—ã": "üí∞ –í—Å–µ —Ü–µ–Ω—ã: [–°–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å](/prices)",
    "–ø—Ä–∏–≤–µ—Ç": "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ FunLand! üòä",
    "–ø–æ–∫–∞": "üëã –î–æ —Å–∫–æ—Ä–æ–≥–æ! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞!",
    "–ø–æ–º–æ—â—å": "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî —è –ø–æ–º–æ–≥—É!",
    "–∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º": (
        "üìû **–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:**\n\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
        "Email: info@funland.ru\n"
        "WhatsApp: +7 (XXX) XXX-XX-XX"
    ),
}

# --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ FunLand. "
    "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, —Å —ç–º–æ–¥–∑–∏. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö ‚Äî –æ—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ. "
    "–ï—Å–ª–∏ –æ –∏–≥—Ä–µ (Superhot, Aimcat) ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –≥–µ–π–º–µ—Ä. "
    "–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ü–µ–Ω—ã. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π ---
def load_bookings():
    global bookings
    try:
        with open(BOOKINGS_FILE, "r", encoding="utf-8") as f:
            bookings = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
    except FileNotFoundError:
        print("üìÅ –§–∞–π–ª bookings.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

def save_bookings():
    with open(BOOKINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(bookings, f, ensure_ascii=False, indent=4)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def log_interaction(question, answer, source):
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "question": question,
        "answer": answer,
        "source": source
    }
    try:
        logs = []
        if os.path.exists(LOG_FILE):
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
        logs.append(log_entry)
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=2)
        print(f"üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω: {source.upper()} ‚Üí '{question[:30]}...'")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

# --- –í—ã–∑–æ–≤ Yandex GPT —Å retry ---
def call_yandex_gpt(prompt, history=None):
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }

    messages = [{"role": "system", "text": SYSTEM_PROMPT}]
    if history:
        messages.extend(history)
    messages.append({"role": "user", "text": prompt})

    payload = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/{YANDEX_GPT_MODEL}",
        "completionOptions": {"maxTokens": 1000, "temperature": 0.7},
        "messages": messages
    }

    for attempt in range(3):
        try:
            response = requests.post(YANDEX_GPT_API_URL, headers=headers, json=payload, timeout=10)
            if response.status_code == 200:
                result = response.json()
                return result["result"]["alternatives"][0]["message"]["text"]
            elif response.status_code == 401:
                return f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.json().get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            elif response.status_code == 400:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {response.json().get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {response.status_code}")
                time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {str(e)}")
            time.sleep(1)

    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Yandex GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –ú–∞—Ä—à—Ä—É—Ç—ã ---
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/ask", methods=["POST"])
def ask():
    data = request.get_json()
    question = data.get("question", "").strip().lower()
    user_id = data.get("user_id", "default")

    if user_id not in conversation_history:
        conversation_history[user_id] = []

    for key in KNOWLEDGE_BASE:
        if key in question:
            answer = KNOWLEDGE_BASE[key]
            conversation_history[user_id].append({"role": "user", "text": question})
            conversation_history[user_id].append({"role": "assistant", "text": answer})
            log_interaction(question, answer, "knowledge_base")
            return jsonify({"answer": answer})

    response = call_yandex_gpt(question, conversation_history[user_id])
    conversation_history[user_id].append({"role": "user", "text": question})
    conversation_history[user_id].append({"role": "assistant", "text": response})
    log_interaction(question, response, "yandex_gpt")
    return jsonify({"answer": response})

# --- –°—Ç—Ä–∞–Ω–∏—Ü—ã ---
@app.route("/booking", methods=["GET", "POST"])
def booking():
    if request.method == "POST":
        name = request.form.get("name")
        phone = request.form.get("phone")
        date = request.form.get("date")
        guests = request.form.get("guests")
        event_type = request.form.get("event_type")

        if not all([name, phone, date, guests, event_type]):
            return render_template("booking.html", error="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")

        new_booking = {
            "name": name,
            "phone": phone,
            "date": date,
            "guests": guests,
            "event_type": event_type,
            "created_at": datetime.now().strftime("%d.%m.%Y %H:%M")
        }
        bookings.append(new_booking)
        save_bookings()
        return render_template("booking.html", success="–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    return render_template("booking.html")

@app.route("/bookings")
def bookings_list():
    return render_template("bookings_list.html", bookings=bookings)

@app.route("/birthday")
def birthday():
    return render_template("birthday.html")

@app.route("/birthday_calc")
def birthday_calc():
    return render_template("birthday_calc.html")

@app.route("/events")
def events():
    return render_template("events.html")

@app.route("/admin/login", methods=["GET", "POST"])
def admin_login():
    if request.method == "POST":
        if request.form.get("username") == ADMIN_USER and request.form.get("password") == ADMIN_PASS:
            session["admin_logged_in"] = True
            return redirect(url_for("admin_dashboard"))
        return render_template("admin/login.html", error="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    return render_template("admin/login.html")

@app.route("/admin")
def admin_dashboard():
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    return render_template("admin/dashboard.html", bookings=bookings)

@app.route("/admin/logout")
def admin_logout():
    session.pop("admin_logged_in", None)
    return redirect(url_for("index"))

# --- –ó–∞–ø—É—Å–∫ ---
load_bookings()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)